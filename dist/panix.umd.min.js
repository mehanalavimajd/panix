!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).panix={})}(this,function(e){"use strict";let i=e=>{let r=document.createElement(e.tag);for(var[t,n]in e.props)console.log(t,n),r.setAttribute(t,n);if(Array.isArray(e.children))e.children.forEach(e=>{i(e)});else{if("string"!=typeof e.children)throw new Error("Panix.js has made a problem: "+"The children argument of node should be either an array or String");r.innerHTML=e.children}return r};e.createElement=i,e.node=(e,r,t)=>({tag:e,props:r,children:t}),e.render=(e,r)=>{r.appendChild(i(e))},e.update=(n,t)=>{if(n.tag!==t.tagName)t.parentNode.replaceChild(i(n),t);else if(n.props.length===t.attributes.length&&t.attributes.forEach(e=>{for(var[r,t]in e.key,e.value,n.props);}),Array.isArray(n.children))if(n.children.length===t.children.length){let r=0;n.forEach(e=>{n.children[r]!==t.children[r]&&(t.children[r]=n.children[r]),r++})}else t.parentNode.replaceChild(i(n),t);else"string"==typeof n.children&&n.children!==t.textContent&&(t.textContent=n.children)},Object.defineProperty(e,"__esModule",{value:!0})});